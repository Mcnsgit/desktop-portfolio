// src/components/desktop/Taskbar.tsx
import React, { useState, useEffect, useCallback } from "react";
import { useDesktop } from "../../context/DesktopContext";
import { useSounds } from "../../hooks/useSounds";
import styles from "./Taskbar.module.scss";
import Image from "next/image";
import { launchApplication } from "../../utils/appLauncher"; // Import launchApplication
import {
  // ChevronRight,
  Clock,
  Volume2,
  Wifi,
  Battery,
  // User
} from "lucide-react";

interface TaskbarProps {
  onStartClick: () => void;
}

const Taskbar: React.FC<TaskbarProps> = ({ onStartClick }) => {
  const { state, dispatch } = useDesktop();
  const { playSound } = useSounds();
  const [currentTime, setCurrentTime] = useState<string>("");
  const [currentDate, setCurrentDate] = useState<string>("");
  const [showTooltip, setShowTooltip] = useState<{
    windowId: string;
    position: { x: number; y: number };
  } | null>(null);

  // Update clock
  useEffect(() => {
    const updateTime = () => {
      const now = new Date();
      const timeString = now.toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false, // Use 24-hour format
      });

      const dateString = now.toLocaleDateString([], {
        month: "short",
        day: "numeric",
        year: "numeric",
      });

      setCurrentTime(timeString);
      setCurrentDate(dateString);
    };

    updateTime(); // Update immediately
    const timer = setInterval(updateTime, 1000);

    return () => clearInterval(timer);
  }, []);

  // Handle Start button click
  const handleStartClick = useCallback((e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent click from bubbling to desktop
    e.preventDefault(); // Prevent default behavior

    playSound("click");
    onStartClick();
  }, [onStartClick, playSound]);

  // Handle taskbar item click
  const handleTaskbarItemClick = useCallback((windowId: string) => {
    const windowData = state.windows.find(w => w.id === windowId);
    if (!windowData) return;

    // If window is minimized, restore it
    if (windowData.minimized) {
      dispatch({
        type: "RESTORE_WINDOW",
        payload: { id: windowId }
      });

      // Focus the window
      dispatch({
        type: "FOCUS_WINDOW",
        payload: { id: windowId }
      });

      playSound("click");
    }
    // If window is already active, minimize it
    else if (state.activeWindowId === windowId) {
      dispatch({
        type: "MINIMIZE_WINDOW",
        payload: { id: windowId }
      });

      playSound("click");
    }
    // Otherwise, focus the window
    else {
      dispatch({
        type: "FOCUS_WINDOW",
        payload: { id: windowId }
      });

      playSound("click");
    }
  }, [dispatch, playSound, state.activeWindowId, state.windows]);

  // Show tooltip on hover
  const handleTaskbarItemMouseEnter = useCallback((e: React.MouseEvent, windowId: string) => {
    const rect = e.currentTarget.getBoundingClientRect();
    setShowTooltip({
      windowId,
      position: {
        x: rect.left + rect.width / 2,
        y: rect.top - 5,
      },
    });
  }, []);

  // Hide tooltip on mouse leave
  const handleTaskbarItemMouseLeave = useCallback(() => {
    setShowTooltip(null);
  }, []);

  // Get icon for window type
  const getWindowIcon = useCallback((windowType: string) => {
    // This can now use getAppIcon from appLauncher for consistency if appName matches windowType
    // Or remain specific if taskbar icons differ from generic app icons
    switch (windowType) {
      case 'folder':
        return '/assets/win98-icons/png/directory_open-0.png';
      case 'texteditor':
        return '/assets/win98-icons/png/notepad_file-0.png';
      case 'imageviewer':
        return '/assets/win98-icons/png/media_player_file-0.png';
      case 'project':
        return '/assets/win98-icons/png/joystick-5.png';
      case 'weatherapp':
        return '/assets/win98-icons/png/sun-0.png';
      case 'aboutme': // Corrected from 'about' to match WINDOW_TYPES.ABOUT if it's 'aboutme' or use getAppIcon
      case 'about':
        return '/assets/win98-icons/png/address_book_user.png';
      case 'contact':
        return '/assets/win98-icons/png/modem-5.png';
      case 'browser':
        return '/assets/win98-icons/png/html-0.png';
      default:
        return '/assets/win98-icons/png/application_blue_lines-0.png'; // More generic default
    }
  }, []);

  // Quick launch handlers
  const handleQuickLaunchFileExplorer = useCallback(() => {
    launchApplication("fileexplorer", dispatch, state.windows, {
      title: "File Explorer",
      initialPath: "/home/guest",
      // id can be omitted to be auto-generated by factory
    });
    playSound("windowOpen"); // Keep sound if specific to quick launch action
  }, [dispatch, playSound, state.windows]);

  const handleQuickLaunchTextEditor = useCallback(() => {
    launchApplication("texteditor", dispatch, state.windows, {
      title: "Text Editor - Untitled",
      // filePath is undefined by default in factory if not provided
    });
    playSound("windowOpen");
  }, [dispatch, playSound, state.windows]);

  const handleQuickLaunchWebBrowser = useCallback(() => {
    launchApplication("browser", dispatch, state.windows, {
      title: "Web Browser",
      // initialUrl can be set here if desired, e.g., { initialUrl: "https://google.com" }
    });
    playSound("windowOpen");
  }, [dispatch, playSound, state.windows]);

  return (
    <div
      className={styles.taskbar}
      onClick={(e) => e.stopPropagation()}
    >
      {/* Start button */}
      <div
        className={styles.startButton}
        onClick={handleStartClick}
      >
        <Image
          src="/assets/win98-icons/png/computer_explorer-3.png"
          alt="Start"
          width={16}
          height={16}
        />
        <span>Start</span>
      </div>

      {/* Quick launch icons */}
      <div className={styles.quickLaunch}>
        <button className={styles.quickLaunchButton} title="File Explorer" onClick={handleQuickLaunchFileExplorer}>
          <Image
            src="/assets/win98-icons/png/directory_explorer-0.png"
            alt="Explorer"
            width={16}
            height={16}
          />
        </button>
        <button className={styles.quickLaunchButton} title="Text Editor" onClick={handleQuickLaunchTextEditor}>
          <Image
            src="/assets/win98-icons/png/notepad_file-0.png"
            alt="Notepad"
            width={16}
            height={16}
          />
        </button>
        <button className={styles.quickLaunchButton} title="Web Browser" onClick={handleQuickLaunchWebBrowser}>
          <Image
            src="/assets/win98-icons/png/html-0.png"
            alt="Browser"
            width={16}
            height={16}
          />
        </button>

        <div className={styles.separator}></div>
      </div>

      {/* Window buttons */}
      <div className={styles.windowButtons}>
        {state.windows.map((window) => (
          <button
            key={window.id}
            className={`${styles.windowButton} ${state.activeWindowId === window.id ? styles.active : ""} ${window.minimized ? styles.minimized : ""}`}
            onClick={() => handleTaskbarItemClick(window.id)}
            onMouseEnter={(e) => handleTaskbarItemMouseEnter(e, window.id)}
            onMouseLeave={handleTaskbarItemMouseLeave}
            title={window.title}
          >
            <div className={styles.windowButtonIcon}>
              <Image
                src={getWindowIcon(window.type)}
                alt={window.title}
                width={16}
                height={16}
              />
            </div>
            <span className={styles.windowButtonText}>{window.title}</span>
          </button>
        ))}
      </div>

      {/* System tray */}
      <div className={styles.systemTray}>
        <button className={styles.trayIcon} title="Volume">
          <Volume2 size={16} />
        </button>
        <button className={styles.trayIcon} title="Network">
          <Wifi size={16} />
        </button>
        <button className={styles.trayIcon} title="Battery">
          <Battery size={16} />
        </button>

        {/* Clock and date */}
        <div className={styles.clock} title={currentDate}>
          <Clock size={14} className={styles.clockIcon} />
          <span>{currentTime}</span>
        </div>
      </div>

      {/* Window tooltips */}
      {showTooltip && (
        <div
          className={styles.windowTooltip}
          style={{
            left: `${showTooltip.position.x}px`,
            top: `${showTooltip.position.y}px`,
          }}
        >
          {state.windows.find(w => w.id === showTooltip.windowId)?.title || "Window"}
        </div>
      )}
    </div>
  );
};

export default Taskbar;